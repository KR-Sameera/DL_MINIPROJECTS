# -*- coding: utf-8 -*-
"""MNIST_DIGIT_DL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZYuICrnstErCdw9JeAtqSsVKyyacgTVH
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import cv2
from google.colab.patches import cv2_imshow
from PIL import Image
import tensorflow as tf
tf.random.set_seed(3)
from tensorflow import keras
from keras.datasets import mnist

(X_train,Y_train),(X_test,Y_test)=mnist.load_data()

plt.imshow(X_train[25])
plt.show()

print(Y_train[25])

print(Y_train.shape,Y_test.shape)

print(np.unique(Y_train))
print(np.unique(Y_test))

X_train =X_train/255
X_test=X_test/255

print(X_train[10])

"""neural network"""

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28,28)),
    keras.layers.Dense(50,activation='relu'),
    keras.layers.Dense(50,activation='relu'),
    keras.layers.Dense(10,activation='sigmoid')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(X_train,Y_train,epochs=10)

loss, accuracy = model.evaluate(X_test, Y_test)
print(accuracy)

print(X_test.shape)

plt.imshow(X_test[0])
plt.show()

print(Y_test[0])

Y_pred=model.predict(X_test)

print(Y_pred.shape)

print(Y_pred[0])

label_first = np.argmax(Y_pred[0])
 print(label_first)

Y_pred_label=[np.argmax(i) for i in  Y_pred]
print(Y_pred_label)

print(Y_pred)

"""confusion matrix"""

from tensorflow.math import confusion_matrix
cm=confusion_matrix(Y_test,Y_pred_label)
print(cm)

import seaborn as  sns
plt.figure(figsize=(15,7))
sns.heatmap(cm,annot=True,fmt='d',cmap='Blues')
plt.ylabel('True Labels')
plt.xlabel('Predicted Labels')

"""Predictive system"""

img= '/content/MNIST_digit.png'

inp=cv2.imread(img)

type(inp)

print(inp)

cv2_imshow(inp)

inp.shape

gray= cv2.cvtColor(inp,cv2.COLOR_RGB2GRAY)

gray.shape

resize=cv2.resize(gray,(28,28))

resize.shape

cv2_imshow(resize)

resize=resize/255

img_reshape=np.reshape(resize,[1,28,28])

input_predict=model.predict(img_reshape)
print(input_predict)

inp_label=np.argmax(input_predict)
print(inp_label)

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

grayscale = cv2.cvtColor(input_image, cv2.COLOR_RGB2GRAY)

input_image_resize = cv2.resize(grayscale, (28, 28))

input_image_resize = input_image_resize/255

image_reshaped = np.reshape(input_image_resize, [1,28,28])

input_prediction = model.predict(image_reshaped)

input_pred_label = np.argmax(input_prediction)

print('The Handwritten Digit is recognised as ', input_pred_label)